#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May  7 17:57:45 2018

@author: duilio
"""
import numpy
import numpy as np
import pydicom
import os

#-----------------------Prueba Numero uno----------------------

#def load_dicoms(directory):
# 
#    filelist = [ name for name in os.listdir(directory) if name.find(".dcm") > 0 ]
#    filelist.sort()
#    num_images = len(filelist)  
#    counter = 0
# 
#    filenames = []
#    data = np.empty((num_images, 512, 512, 1))   # Each DaTsan image contains 320 x 320 pixels  
# 
#    for filename in filelist:
#        filenames.append(filename)
#        image = pydicom.dcmread(os.path.join(directory, filename))  # filename is two directories down from where this is running
#        rows = image.Rows
#        assert rows == 512
#        cols = image.Columns
#        assert cols == 512
# 
#        for x in range(0, 512):
#            for y in range(0, 512):
#              data[counter][x][y] = image.pixel_array[x][y]
#        counter = counter + 1
#   
# 
#    return data
#-------------------------me da una matriz 512 512 5 1--------------

#-----------------------Prueba Numero dos----------------------

def load_dicoms(directory):
    lstFilesDCM = []  # create an empty list
    for dirName, subdirList, fileList in os.walk(directory):
        for filename in fileList:
            if ".dcm" in filename.lower():  # check whether the file's DICOM
                lstFilesDCM.append(os.path.join(dirName,filename))

# Get ref file
    RefDs = pydicom.dcmread(lstFilesDCM[4])
    ConstPixelDims = (int(RefDs.Rows), int(RefDs.Columns), len(lstFilesDCM))

# Load spacing values (in mm)

    ArrayDicom = numpy.zeros(ConstPixelDims, dtype=RefDs.pixel_array.dtype)

# loop through all the DICOM files
    for filenameDCM in lstFilesDCM:
    # read the file
        ds = pydicom.dcmread(filenameDCM)
    # store the raw image data
        ArrayDicom[:, :, lstFilesDCM.index(filenameDCM)] = ds.pixel_array  
    return ArrayDicom
#-------------------------me da una matriz 512 512 5--------------






#------------------Preparar los datos-----------------

def extract_dataset(folder, bounds = .2):
 
    dirs = os.listdir(folder)
    dirs = [ label for label in dirs if label[0] != '.' ]
    dirs.sort()

 
    #print labels
    print(dirs)
    
    
# def load_dicoms(directory):
#    lstFilesDCM = []  # create an empty list
#    for dirName, subdirList, fileList in os.walk(directory):
#        for filename in fileList:
#            if ".dcm" in filename.lower():  # check whether the file's DICOM
#                lstFilesDCM.append(os.path.join(dirName,filename))
#
## Get ref file
#    RefDs = pydicom.dcmread(lstFilesDCM[4])
#    ConstPixelDims = (int(RefDs.Rows), int(RefDs.Columns), len(lstFilesDCM))
#
## Load spacing values (in mm)
#
#    ArrayDicom = numpy.zeros(ConstPixelDims, dtype=RefDs.pixel_array.dtype)
#
## loop through all the DICOM files
#    for filenameDCM in lstFilesDCM:
#    # read the file
#        ds = pydicom.dcmread(filenameDCM)
#    # store the raw image data
#        ArrayDicom[:, :, lstFilesDCM.index(filenameDCM)] = ds.pixel_array 
#        
    data_train = []
    data_test = []
    label_train = []
    label_test = []
 
    index = 0
    for label in dirs:
 
        subdirs = os.path.join(folder, label)
#        subdirs = [ label for label in os.listdir(subdir) if label[0] != '.' ]
 
        subdir_index = 0
       
        for container in subdirs:
 
            data=load_dicoms("./EGGS_DIANA/")
#            data = extract_images(os.path.join(subdir, container))
# 
            if subdir_index > bounds * len(subdirs):
                new_train = []
# 
                for img in data:
                    new_train.append(img)
# 
                data_train.append(new_train)
                label_train.append(index)
            else:
                new_test = []
 
                for img in data:
                    new_test.append(img)
 
                data_test.append(new_test)
                label_test.append(index)
 
            subdir_index += 1
 
        index += 1
 
    data_train = np.array(data_train)
    data_test = np.array(data_test)
    label_train = np.array(label_train)
    label_test = np.array(label_test)
 
    return (data_train, label_train), ( data_test, label_test )
 

data=load_dicoms("./EGGS_DIANA/")
#entrenamiento=extract_dataset('/home/duilio/Escritorio/EGGS_DIANA/')